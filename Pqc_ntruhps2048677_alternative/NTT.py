import random;
import numpy as np;

Q = 2048; Q_mask = 0x03FF;
N = 677;
size = 1536;

# If newQ = 1536 * k + 1, than it always has 1536-th primitive root;
newq = 1419778561;
newz = 4360860;
#zetas = [0] * 256;
zetas = [1, 4360860, 585893566, 392536624, 66488721, 826132640, 439732608, 1205515279, 1132394312, 319036243, 143596738, 578317142, 
         335065015, 836145506, 1276692374, 1070111631, 745047005, 286996363, 540466509, 1059363934, 1272963317, 1318240305, 739430276, 
         537903795, 499443525, 507600816, 759785221, 1047722775, 1410553693, 1067659455, 920937097, 1245350916, 342752416, 704288034, 
         1038330015, 90886382, 244276882, 268877342, 962803782, 993026782, 1220989152, 1290757884, 96879348, 866015315, 328110608, 
         110898446, 524882935, 975672559, 340714355, 819387434, 512922246, 490435476, 100264424, 1270841958, 225956480, 1339796214, 
         922006767, 534115670, 140213260, 43251974, 1061065912, 758427489, 645152625, 1277565510, 847867989, 837040388, 760546705, 
         910784836, 191535558, 1186466458, 294895240, 1189552308, 593525082, 755930544, 99364234, 1355999723, 1197062098, 1124056456, 
         625267293, 1363608748, 25295906, 789563704, 797016290, 330160399, 36658650, 433806083, 688849662, 938994154, 364611193, 
         1257749275, 1263199715, 1356088414, 366549205, 714985962, 700892196, 554620565, 43072619, 1217007723, 1308311413, 1218237973, 
         913144394, 758403871, 1294196098, 805179228, 1071885687, 781516276, 1176619008, 986222807, 570938430, 666359199, 61731293, 
         152997892, 169022146, 1036105288, 1134587036, 272810548, 778725501, 1339377400, 368016173, 434862576, 725483197, 1172750534, 
         921556969, 1161980692, 3392168, 96917421, 782946458, 912877055, 568650912, 484783305, 549434885, 251507427, 1221063354, 
         1165779696, 951725860, 1111410448, 193686775, 445901990, 212972849, 891947673, 928656277, 558964406, 239975017, 1391778496, 
         852125783, 616562470, 48787864, 387680068, 142484998, 979606557, 770880072, 925852877, 1037229177, 1181579004, 508002532, 
         580276707, 76532256, 527344451, 356636598, 1221470709, 21146624, 9642568, 307447343, 1010800094, 1014933921, 1127356124, 
         559746038, 1359152137, 717371975, 212469807, 754088298, 849349373, 952818078, 764125773, 1099542243, 1220893169, 137229438, 
         283756619, 686907180, 445834560, 54345176, 847030679, 1115812680, 885203014, 547679213, 877488980, 958594307, 378893451, 
         1339457207, 549422748, 1275334925, 481886300, 305846363, 412341731, 815756550, 106634278, 1344810433, 1219457146, 485202229, 
         163341518, 909017536, 1221465227, 251147641, 1099997299, 805973051, 1402721749, 1249411031, 1297195646, 994188015, 845402445, 
         927875001, 992253446, 785042567, 1216395077, 248349094, 25058674, 1272595153, 156353195, 1357591621, 524211088, 148135482, 
         272558081, 133868656, 758049302, 1207279687, 268864572, 645985461, 1365205432, 346621002, 1257370192, 757553339, 704819910, 
         556934701, 1299956552, 1196529895, 179450550, 918885337, 1251728738, 1089367907, 446035459, 143386179, 956725369, 1150645472, 
         1126061305, 494698795, 1257081030, 525916187, 465836665, 918281880, 509909251, 1291641831, 167200653, 1411542, 796984185, 
         882827638, 569876909]
#invzetas = [0] * 256;
invzetas = [1, 849901652, 536950923, 622794376, 1418367019, 1252577908, 128136730, 909869310, 501496681, 953941896, 893862374, 162697531, 
            925079766, 293717256, 269133089, 463053192, 1276392382, 973743102, 330410654, 168049823, 500893224, 1240328011, 223248666, 119822009, 
            862843860, 714958651, 662225222, 162408369, 1073157559, 54573129, 773793100, 1150913989, 212498874, 661729259, 1285909905, 1147220480, 
            1271643079, 895567473, 62186940, 1263425366, 147183408, 1394719887, 1171429467, 203383484, 634735994, 427525115, 491903560, 574376116, 
            425590546, 122582915, 170367530, 17056812, 613805510, 319781262, 1168630920, 198313334, 510761025, 1256437043, 934576332, 200321415, 
            74968128, 1313144283, 604022011, 1007436830, 1113932198, 937892261, 144443636, 870355813, 80321354, 1040885110, 461184254, 542289581, 
            872099348, 534575547, 303965881, 572747882, 1365433385, 973944001, 732871381, 1136021942, 1282549123, 198885392, 320236318, 655652788, 
            466960483, 570429188, 665690263, 1207308754, 702406586, 60626424, 860032523, 292422437, 404844640, 408978467, 1112331218, 1410135993, 
            1398631937, 198307852, 1063141963, 892434110, 1343246305, 839501854, 911776029, 238199557, 382549384, 493925684, 648898489, 440172004, 
            1277293563, 1032098493, 1370990697, 803216091, 567652778, 28000065, 1179803544, 860814155, 491122284, 527830888, 1206805712, 
            973876571, 1226091786, 308368113, 468052701, 253998865, 198715207, 1168271134, 870343676, 934995256, 851127649, 506901506, 636832103, 
            1322861140, 1416386393, 257797869, 498221592, 247028027, 694295364, 984915985, 1051762388, 80401161, 641053060, 1146968013, 285191525, 
            383673273, 1250756415, 1266780669, 1358047268, 753419362, 848840131, 433555754, 243159553, 638262285, 347892874, 614599333, 125582463, 
            661374690, 506634167, 201540588, 111467148, 202770838, 1376705942, 865157996, 718886365, 704792599, 1053229356, 63690147, 156578846, 
            162029286, 1055167368, 480784407, 730928899, 985972478, 1383119911, 1089618162, 622762271, 630214857, 1394482655, 56169813, 794511268, 
            295722105, 222716463, 63778838, 1320414327, 663848017, 826253479, 230226253, 1124883321, 233312103, 1228243003, 508993725, 659231856, 
            582738173, 571910572, 142213051, 774625936, 661351072, 358712649, 1376526587, 1279565301, 885662891, 497771794, 79982347, 1193822081, 
            148936603, 1319514137, 929343085, 906856315, 600391127, 1079064206, 444106002, 894895626, 1308880115, 1091667953, 553763246, 
            1322899213, 129020677, 198789409, 426751779, 456974779, 1150901219, 1175501679, 1328892179, 381448546, 715490527, 1077026145, 
            174427645, 498841464, 352119106, 9224868, 372055786, 659993340, 912177745, 920335036, 881874766, 680348285, 101538256, 146815244, 
            360414627, 879312052, 1132782198, 674731556, 349666930, 143086187, 583633055, 1084713546, 841461419, 1276181823, 1100742318, 
            287384249, 214263282, 980045953, 593645921, 1353289840, 1027241937, 833884995, 1415417701]
brv = [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 
       248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 
       188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 
       218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 
       158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 
       233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 
       173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 
       203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 
       143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255];

inv_2 = pow(2, -1, newq);
a = [random.randrange(0, Q, 1) for p in range(0, N)];
b = [random.randrange(0, Q, 1) for p in range(0, N)];

def zetas_cal(zetas, invzetas):
    for i in range (0, 256):
        zetas[i] = pow(newz, i, newq);
        invzetas[i] = pow(newz, -i, newq);
    return zetas, invzetas;

def schoolbook_multiplication(poly1, poly2):

    result = [0] * N;
    for i in range (0, N):
        for j in range(0, N):
            idx = i + j;
            while(idx >= N):
                idx = idx - N;
            result[idx] += poly1[i] * poly2[j];
            if(result[idx] >= Q):
                result[idx] = result[idx] % Q;
    #print("a      = ",poly1);
    #print("b      = ",poly2);
    #print("result = ",result);

    return result

def good_thomas_permutation(poly1, poly2):

    pad_poly1 = poly1 + [0] * (size-N);
    pad_poly2 = poly2 + [0] * (size-N);
    #(len(pad_a));
    reorder_poly1 = [[0]*512 for _ in range(3)];
    reorder_poly2 = [[0]*512 for _ in range(3)];
    '''
    for i in range (0, 1536):
        #x = i % 3; y = i % 512;
        #reorder_poly1[x][y] = pad_poly1[i];
        #reorder_poly2[x][y] = pad_poly2[i];
    '''
    for i in range (0, 3):
        for j in range (0, 512):
            idx = (i * 512 + j * 3) % 1536;
            reorder_poly1[i][j] = pad_poly1[idx];
            reorder_poly2[i][j] = pad_poly2[idx];

    return reorder_poly1, reorder_poly2;

def inv_good_thomas_permutation(poly):

    reorder_poly = [0] * 1536;
    '''
    for i in range(0, 3):
        for j in range(0, 512):
            idx = (1024 * i + 513 * j) % 1536;
            reorder_poly[idx] = poly[i][j];
    '''
    idx = 0;
    for i in range (0,512):
        reorder_poly[idx] = poly[0][i];
        idx = (idx + 3) % 1536;
    idx = 512;
    for i in range (0,512):
        reorder_poly[idx] = poly[1][i];
        idx = (idx + 3) % 1536;
    idx = 1024;
    for i in range (0,512):
        reorder_poly[idx] = poly[2][i];
        idx = (idx + 3) % 1536;

    return reorder_poly;

def ntt_512(poly):

    win_len = 256;
    while(win_len >= 1):
        start = 0;
        brv_idx = 0;
        while(start < 512):
            zeta = zetas[brv[brv_idx]];
            i = start;
            while(i < start + win_len):
                b               = (zeta * poly[i+win_len]) % newq;
                poly[i+win_len] = (poly[i] - b) % newq;
                poly[i]         = (poly[i] + b) % newq;
                i += 1;
            start = win_len + i;
            brv_idx += 1;
        win_len = int(win_len / 2);

    return poly;

def intt_512(poly):

    win_len = 1;
    while(win_len <= 256):
        start = 0;
        brv_idx = 0;
        while(start < 512):
            zeta = invzetas[brv[brv_idx]];
            i = start;
            while(i < start + win_len):
                a               = (poly[i] + poly[i+win_len]) * inv_2;
                b               = (poly[i] - poly[i+win_len]) * inv_2;
                poly[i]         = a % newq;
                poly[i+win_len] = (b * zeta) % newq;
                i += 1;
            start = win_len + i;
            brv_idx += 1;
        win_len = int(win_len * 2);

    return poly;

def conv(poly1, poly2):

    result = [0] * 3;
    for i in range (0, 3):
        for j in range (0, 3):
            idx = 0;
            idx = i + j;
            while(idx >= 3):
                idx = idx - 3;
            result[idx] += (poly1[i] * poly2[j]) % newq;
            if(result[idx] >= newq):
                result[idx] %= newq;

    return result;

def final_stage(poly):

    result = [0] * N;

    for i in range(0, size):
        idx = i;
        while(idx >= N):
            idx -= N;
        result[idx] += poly[i];
        if(result[idx] >= Q):
            result[idx] = result[idx] % Q;
            #poly[i] = poly[i] & Q_mask;

    for i in range (0, N):
        result[i] = result[i] % Q;
        #poly[i] = poly[i] & Q_mask;

    return result;

#(zetas, invzetas) = zetas_cal(zetas, invzetas);

schoolbook_result = [0] * N;
schoolbook_result = schoolbook_multiplication(a, b);

reorder_poly1 = [[0]*512 for _ in range(3)]; ntt_poly1 = [[0]*512 for _ in range(3)];
reorder_poly2 = [[0]*512 for _ in range(3)]; ntt_poly2 = [[0]*512 for _ in range(3)];
ntt_conv      = [[0]*512 for _ in range(3)]; ntt_1536_result = [0] * 1536;
ntt_result    = [0] * 677;
(reorder_poly1, reorder_poly2) = good_thomas_permutation(a, b);

for i in range(0, 3):
    ntt_poly1[i][:] = ntt_512(reorder_poly1[i][:]);
    ntt_poly2[i][:] = ntt_512(reorder_poly2[i][:]);

tem_poly1 = [0] * 3; tem_poly2 = [0] * 3; tem_result = [0] * 3;
for i in range(0, 512):
    for j in range (0, 3):
        tem_poly1[j] = ntt_poly1[j][i];
        tem_poly2[j] = ntt_poly2[j][i];
    tem_result = conv(tem_poly1, tem_poly2);
    for k in range (0,3):
        ntt_conv[k][i] = tem_result[k];

for i in range(0, 3):
    ntt_conv[i][:] = intt_512(ntt_conv[i][:]);

ntt_1536_result = inv_good_thomas_permutation(ntt_conv);
ntt_result = final_stage(ntt_1536_result);

error = 0;
for i in range (0,N):
    if(schoolbook_result[i] != ntt_result[i]):
        error += 1;
if(error == 0):
    print("NTT success");
else:
    print(error);

'''
#ntt test
test1_a = [random.randrange(0, newq, 1) for p in range(0, 512)];
test1_b = [random.randrange(0, newq, 1) for p in range(0, 512)];

test_school = [0] * 512;
for i in range (0, 512):
    for j in range(0, 512):
        idx = 0;
        idx = i + j;
        while(idx >= 512):
            idx = idx - 512;
        test_school[idx] += test1_a[i] * test1_b[j];
        if(test_school[idx] >= newq):
            test_school[idx] = test_school[idx] % newq;

ntt_512(test1_a); ntt_512(test1_b);
test_ntt = [0] * 512;
for i in range (0, 512):
    test_ntt[i] = (test1_a[i] * test1_b[i]) % newq;
intt_512(test_ntt);

test_error = 0;
for i in range (0,512):
    if( test_school[i] != test_ntt[i] ):
        test_error += 1;
if(test_error == 0):
    print("NTT CORRECT");
else:
    print("NTT ERROR, ERROR COUNT :",test_error);
'''

